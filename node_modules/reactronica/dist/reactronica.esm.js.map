{"version":3,"file":"reactronica.esm.js","sources":["../src/components/Song.tsx","../src/lib/buildSequencerStep.ts","../src/lib/hooks/index.ts","../src/components/Track.tsx","../src/components/Instrument.tsx","../src/components/Effect.tsx","../src/config/index.ts"],"sourcesContent":["import React, { useEffect } from 'react';\nimport StartAudioContext from 'startaudiocontext';\n\nimport Tone from '../lib/tone';\n\ntype SongContextProps = {\n  isPlaying: boolean;\n};\n\nexport const SongContext = React.createContext<SongContextProps>({\n  isPlaying: false,\n});\n\nexport type SongProps = {\n  isPlaying?: boolean;\n  bpm?: number;\n  swing?: number;\n  subdivision?: string;\n  swingSubdivision?: string;\n  volume?: number;\n  isMuted?: boolean;\n  children?: React.ReactNode;\n};\n\nconst Song: React.FC<SongProps> = ({\n  isPlaying = false,\n  bpm = 90,\n  // subdivision = '4n',\n  swing = 0,\n  swingSubdivision = '8n',\n  volume = 0,\n  isMuted = false,\n  children,\n}) => {\n  useEffect(() => {\n    document.body.addEventListener(\n      'click',\n      () => {\n        // iOS Web Audio API requires this library.\n        StartAudioContext(Tone.context);\n      },\n      {\n        once: true,\n      },\n    );\n  }, []);\n\n  useEffect(() => {\n    Tone.Transport.bpm.value = bpm;\n    Tone.Transport.swing = swing;\n    Tone.Transport.swingSubdivision = swingSubdivision;\n  }, [bpm, swing, swingSubdivision]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      // Hack to get Tone to NOT use same settings from another instance\n      Tone.Transport.bpm.value = bpm;\n      Tone.Transport.swing = swing;\n      Tone.Transport.swingSubdivision = swingSubdivision;\n\n      Tone.Transport.start();\n    } else {\n      Tone.Transport.stop();\n    }\n    /* eslint-disable-next-line */\n  }, [isPlaying]);\n\n  useEffect(() => {\n    Tone.Master.volume.value = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    Tone.Master.mute = isMuted;\n  }, [isMuted]);\n\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  return (\n    <SongContext.Provider\n      value={{\n        isPlaying,\n      }}\n    >\n      {children}\n    </SongContext.Provider>\n  );\n};\n\nexport default Song;\n","import { StepNoteType, StepType } from 'components/Track';\nimport { MidiNote } from '../types/midi-notes';\n\nexport type SequencerStep = {\n  notes: StepNoteType[];\n  index: number;\n};\n\nexport default function buildSequencerStep(step: StepType, i): SequencerStep {\n  if (typeof step === 'string') {\n    return {\n      notes: [\n        {\n          name: step as MidiNote,\n        },\n      ],\n      index: i,\n    };\n  } else if (step && (step as StepNoteType).name) {\n    return {\n      notes: [\n        {\n          name: (step as StepNoteType).name,\n          duration: (step as StepNoteType).duration,\n          velocity: (step as StepNoteType).velocity,\n        },\n      ],\n      index: i,\n    };\n  } else if (Array.isArray(step)) {\n    return {\n      notes: (step as Array<StepNoteType | MidiNote>).map((s) => {\n        if (typeof s === 'string') {\n          return {\n            name: s,\n          };\n        }\n\n        return s;\n      }),\n      index: i,\n    };\n  }\n\n  return {\n    notes: [],\n    index: i,\n  };\n}\n","import { useRef, useEffect } from 'react';\n\nexport function usePrevious<Value>(value): Value {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport equal from 'fast-deep-equal';\n\nimport { SongContext } from './Song';\nimport Tone from '../lib/tone';\nimport buildSequencerStep, { SequencerStep } from '../lib/buildSequencerStep';\nimport { usePrevious } from '../lib/hooks';\nimport { MidiNote } from '../types/midi-notes';\n\nexport interface StepNoteType {\n  name: MidiNote;\n  duration?: number | string;\n  velocity?: number;\n}\n\nexport type StepType =\n  | StepNoteType\n  | StepNoteType[]\n  | MidiNote\n  | MidiNote[]\n  | (StepNoteType | MidiNote)[]\n  | null;\n\nexport interface TrackProps {\n  steps?: StepType[];\n  volume?: number;\n  pan?: number;\n  mute?: boolean;\n  solo?: boolean;\n  subdivision?: string;\n  effects?: React.ReactNode[];\n  children: React.ReactNode;\n  onStepPlay?: (stepNotes: StepNoteType[], index: number) => void;\n}\n\nexport interface TrackConsumerProps extends TrackProps {\n  isPlaying: boolean;\n}\n\nexport const TrackContext = React.createContext({\n  volume: 0,\n  pan: 0,\n  mute: false,\n  solo: false,\n  effectsChain: null,\n  onInstrumentsUpdate: null,\n  onAddToEffectsChain: null,\n  onRemoveFromEffectsChain: null,\n});\n\nconst TrackConsumer: React.FC<TrackConsumerProps> = ({\n  // <Song /> props\n  isPlaying,\n  // <Track /> props\n  steps = [],\n  volume = 0,\n  pan = 0,\n  mute,\n  solo,\n  subdivision = '4n',\n  effects = [],\n  children,\n  onStepPlay,\n}) => {\n  const [effectsChain, setEffectsChain] = useState([]);\n  const [instruments, setInstruments] = useState([]);\n  const sequencer = useRef<{\n    start: Function;\n    stop: Function;\n    remove: Function;\n    add: Function;\n    dispose: Function;\n    removeAll: Function;\n  }>();\n  const instrumentsRef = useRef(instruments);\n\n  useEffect(() => {\n    instrumentsRef.current = instruments;\n  }, [instruments]);\n\n  /*\n  Tone.Sequence can't easily play chords. By default, arrays within steps are flattened out and subdivided. However an array of notes is our preferred way of representing chords. To get around this, buildSequencerStep() will transform notes and put them in a notes field as an array. We can then loop through and run triggerAttackRelease() to play the note/s.\n  */\n  const sequencerSteps = steps.map(buildSequencerStep);\n  const prevSequencerSteps: SequencerStep[] = usePrevious(sequencerSteps);\n\n  useEffect(() => {\n    // -------------------------------------------------------------------------\n    // STEPS\n    // -------------------------------------------------------------------------\n\n    // Start/Stop sequencer!\n    if (isPlaying) {\n      sequencer.current = new Tone.Sequence(\n        (_, step) => {\n          step.notes.forEach((note) => {\n            instrumentsRef.current.forEach((instrument) => {\n              instrument.triggerAttackRelease(\n                note.name,\n                note.duration || 0.5,\n                undefined,\n                note.velocity,\n              );\n            });\n          });\n\n          if (typeof onStepPlay === 'function') {\n            onStepPlay(step.notes, step.index);\n          }\n        },\n        sequencerSteps,\n        subdivision,\n      );\n\n      sequencer.current?.start(0);\n    } else {\n      if (sequencer.current) {\n        sequencer.current.stop();\n      }\n    }\n    /* eslint-disable-next-line */\n  }, [isPlaying]);\n\n  useEffect(() => {\n    if (sequencer.current) {\n      if (prevSequencerSteps?.length === sequencerSteps.length) {\n        // When steps length is the same, update steps in a more efficient way\n        sequencerSteps.forEach((step, i) => {\n          const isEqual = equal(\n            sequencerSteps[i].notes,\n            prevSequencerSteps && prevSequencerSteps[i]\n              ? prevSequencerSteps[i].notes\n              : [],\n          );\n\n          if (!isEqual) {\n            sequencer.current?.remove(i);\n            sequencer.current?.add(i, step);\n          }\n        });\n      } else {\n        // When new steps are less or more then prev, remove all and add new steps\n        sequencer.current.removeAll();\n        sequencerSteps.forEach((step, i) => {\n          sequencer.current.add(i, step);\n        });\n      }\n    }\n    /* eslint-disable-next-line */\n  }, [JSON.stringify(sequencerSteps)]);\n\n  useEffect(() => {\n    return function cleanup() {\n      if (sequencer.current) {\n        sequencer.current.dispose();\n      }\n    };\n  }, []);\n\n  const handleAddToEffectsChain = (effect) => {\n    // console.log('<Track />', 'onAddToEffectsChain');\n\n    setEffectsChain((prevEffectsChain) => {\n      return [effect, ...prevEffectsChain];\n    });\n  };\n\n  const handleRemoveFromEffectsChain = (effect) => {\n    // console.log('<Track />', 'onRemoveFromEffectsChain', effect);\n\n    setEffectsChain((prevEffectsChain) => {\n      return prevEffectsChain.filter((e) => e.id !== effect.id);\n    });\n  };\n\n  const handleInstrumentsUpdate = (newInstruments) => {\n    setInstruments(newInstruments);\n  };\n\n  return (\n    <TrackContext.Provider\n      value={{\n        effectsChain, // Used by Instrument\n        pan,\n        volume,\n        mute,\n        solo,\n        onInstrumentsUpdate: handleInstrumentsUpdate,\n        onAddToEffectsChain: handleAddToEffectsChain,\n        onRemoveFromEffectsChain: handleRemoveFromEffectsChain,\n      }}\n    >\n      {children}\n      {effects}\n    </TrackContext.Provider>\n  );\n};\n\nconst Track: React.FC<TrackProps> = (props) => {\n  const { isPlaying } = React.useContext(SongContext);\n\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  return <TrackConsumer isPlaying={isPlaying} {...props} />;\n};\n\nexport default Track;\n","import React, {\n  useEffect,\n  useRef,\n  useContext,\n  // useLayoutEffect\n} from 'react';\n// import equal from 'fast-deep-equal';\n\n// import { SongContext } from './Song';\nimport { TrackContext } from './Track';\nimport Tone from '../lib/tone';\nimport { usePrevious } from '../lib/hooks';\nimport { MidiNote } from 'types/midi-notes';\n// import { MidiNote } from '../types/midi-notes';\n\ntype NoteType = {\n  name: string;\n  velocity?: number;\n  duration?: number | string;\n  /** Use unique key to differentiate from same notes, otherwise it won't play */\n  key?: string | number;\n};\n\nexport type InstrumentType =\n  | 'amSynth'\n  | 'duoSynth'\n  | 'fmSynth'\n  | 'membraneSynth'\n  | 'metalSynth'\n  | 'monoSynth'\n  | 'noiseSynth'\n  | 'pluckSynth'\n  | 'synth'\n  | 'sampler';\n\nexport interface InstrumentProps {\n  type: InstrumentType;\n  notes?: NoteType[];\n  /** Should deprecate */\n  options?: any;\n  polyphony?: number;\n  oscillator?: {\n    type: 'triangle' | 'sine' | 'square';\n  };\n  envelope?: {\n    attack?: number;\n    decay?: number;\n    sustain?: number;\n    release?: number;\n  };\n  samples?: {\n    [key in MidiNote]?: string;\n  };\n  mute?: boolean;\n  solo?: boolean;\n  /** TODO: Type properly and consider loading status */\n  onLoad?: (buffers: any[]) => void;\n}\n\ninterface InstrumentConsumerProps extends InstrumentProps {\n  volume?: number;\n  pan?: number;\n  effectsChain?: React.ReactNode[];\n  onInstrumentsUpdate?: Function;\n}\n\nconst InstrumentConsumer: React.FC<InstrumentConsumerProps> = ({\n  // <Instrument /> Props\n  type = 'synth',\n  options,\n  polyphony = 4,\n  oscillator,\n  envelope,\n  notes = [],\n  samples,\n  onLoad,\n  // <Track /> Props\n  volume,\n  pan,\n  mute,\n  solo,\n  effectsChain,\n  onInstrumentsUpdate,\n}) => {\n  const instrumentRef = useRef<\n    Partial<{\n      curve: number;\n      release: number;\n      triggerAttack: Function;\n      triggerAttackRelease: Function;\n      triggerRelease: Function;\n      add: Function;\n      set: Function;\n      chain: Function;\n      dispose: Function;\n      disconnect: Function;\n    }>\n  >();\n  // const trackChannelBase = useRef(new Tone.PanVol(pan, volume));\n  // const trackChannelBase = useRef(new Tone.Channel(volume, pan));\n  const trackChannelBase = useRef(null);\n  const prevNotes: any[] = usePrevious(notes);\n\n  // -------------------------------------------------------------------------\n  // CHANNEL\n  // TODO: Consider moving this to <Track>\n  // -------------------------------------------------------------------------\n\n  useEffect(() => {\n    trackChannelBase.current = new Tone.Channel(volume, pan);\n\n    return function cleanup() {\n      if (trackChannelBase.current) {\n        trackChannelBase.current.dispose();\n      }\n    };\n    /* eslint-disable-next-line */\n  }, []);\n\n  // -------------------------------------------------------------------------\n  // INSTRUMENT TYPE\n  // -------------------------------------------------------------------------\n\n  const prevType = usePrevious<InstrumentType>(type);\n\n  useEffect(() => {\n    if (type === 'sampler') {\n      instrumentRef.current = new Tone.Sampler(samples, onLoad);\n\n      if (options && options.curve) {\n        instrumentRef.current.curve = options.curve;\n      }\n\n      if (options && options.release) {\n        instrumentRef.current.release = options.release;\n      }\n    } else if (type === 'membraneSynth') {\n      instrumentRef.current = new Tone.MembraneSynth(\n        buildSynthOptions({\n          oscillator,\n          envelope,\n        }),\n      );\n    } else if (type === 'metalSynth') {\n      instrumentRef.current = new Tone.MetalSynth();\n    } else if (type === 'noiseSynth') {\n      instrumentRef.current = new Tone.NoiseSynth();\n    } else if (type === 'pluckSynth') {\n      instrumentRef.current = new Tone.PluckSynth();\n    } else {\n      let synth;\n\n      if (type === 'amSynth') {\n        synth = Tone.AMSynth;\n      } else if (type === 'duoSynth') {\n        synth = Tone.DuoSynth;\n      } else if (type === 'fmSynth') {\n        synth = Tone.FMSynth;\n      } else if (type === 'monoSynth') {\n        synth = Tone.MonoSynth;\n      } else if (type === 'synth') {\n        synth = Tone.Synth;\n      } else {\n        synth = Tone.Synth;\n      }\n\n      /**\n       * PolySynth accepts other Synth types as second param, making them\n       * polyphonic. As this is a common use case, all Synths will be created\n       * via PolySynth. Monophonic synths can easily be created by setting the\n       * `polyphony` prop to 1.\n       */\n      instrumentRef.current = new Tone.PolySynth(\n        polyphony,\n        synth,\n        buildSynthOptions({\n          oscillator,\n          envelope,\n        }),\n      );\n    }\n\n    instrumentRef.current.chain(\n      ...effectsChain,\n      trackChannelBase.current,\n      Tone.Master,\n    );\n\n    // Add this Instrument to Track Context\n    onInstrumentsUpdate([instrumentRef.current]);\n\n    return function cleanup() {\n      if (instrumentRef.current) {\n        instrumentRef.current.dispose();\n      }\n    };\n    /* eslint-disable-next-line */\n  }, [type, polyphony]);\n\n  useEffect(() => {\n    if (\n      // TODO: Add other synth types\n      type === 'synth' &&\n      instrumentRef &&\n      instrumentRef.current &&\n      oscillator\n    ) {\n      instrumentRef.current.set('oscillator', oscillator);\n      // console.log(oscillator);\n    }\n  }, [oscillator, type]);\n\n  // -------------------------------------------------------------------------\n  // VOLUME / PAN / MUTE / SOLO\n  // -------------------------------------------------------------------------\n\n  useEffect(() => {\n    trackChannelBase.current.volume.value = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    trackChannelBase.current.pan.value = pan;\n  }, [pan]);\n\n  useEffect(() => {\n    trackChannelBase.current.mute = mute;\n  }, [mute]);\n\n  useEffect(() => {\n    trackChannelBase.current.solo = solo;\n  }, [solo]);\n\n  // -------------------------------------------------------------------------\n  // NOTES\n  // -------------------------------------------------------------------------\n\n  /**\n   NOTE: Would prefer to use useLayoutEffect as it is a little faster, but unable to test it right now\n   **/\n  useEffect(() => {\n    // Loop through all current notes\n    notes &&\n      notes.forEach((note) => {\n        // Check if note is playing\n        const isPlaying =\n          prevNotes &&\n          prevNotes.filter((prevNote) => {\n            // Check both note name and unique key.\n            // Key helps differentiate same notes, otherwise it won't trigger\n            return prevNote.name === note.name && prevNote.key === note.key;\n          }).length > 0;\n\n        // Only play note is it isn't already playing\n        if (!isPlaying) {\n          if (note.duration) {\n            instrumentRef.current.triggerAttackRelease(\n              note.name,\n              note.duration,\n              undefined,\n              note.velocity,\n            );\n          } else {\n            instrumentRef.current.triggerAttack(\n              note.name,\n              undefined,\n              note.velocity,\n            );\n          }\n        }\n      });\n\n    // Loop through all previous notes\n    prevNotes &&\n      prevNotes.forEach((note) => {\n        // Check if note is still playing\n        const isPlaying =\n          notes && notes.filter((n) => n.name === note.name).length > 0;\n\n        if (!isPlaying) {\n          instrumentRef.current.triggerRelease(note.name);\n        }\n      });\n  }, [notes, prevNotes]);\n\n  // -------------------------------------------------------------------------\n  // EFFECTS CHAIN\n  // -------------------------------------------------------------------------\n\n  useEffect(() => {\n    // NOTE: Using trackChannelBase causes effects to not turn off\n    instrumentRef.current.disconnect();\n    instrumentRef.current.chain(\n      ...effectsChain,\n      trackChannelBase.current,\n      Tone.Master,\n    );\n  }, [effectsChain]);\n\n  // -------------------------------------------------------------------------\n  // SAMPLES\n  // Run whenever `samples` change, using Tone.Sampler's `add` method to load\n  // more samples after initial mount\n  // TODO: Check if first mount, as sampler constructor has already loaded samples\n  // -------------------------------------------------------------------------\n\n  const prevSamples = usePrevious(samples);\n\n  useEffect(() => {\n    // When sampler is initiated, it already loads samples.\n    // We'll use !isFirstSamplerInit to skip adding samples if sampler has been\n    // initiated in this render.\n    const isFirstSamplerInit = type === 'sampler' && prevType !== type;\n\n    if (type === 'sampler' && Boolean(samples) && !isFirstSamplerInit) {\n      // const isEqual = equal(samples, prevSamples);\n      const prevSampleKeys = Object.keys(prevSamples);\n      const sampleKeys = Object.keys(samples);\n\n      // Samples to add\n      const addSampleKeys = sampleKeys.filter(\n        (key) => !prevSampleKeys.includes(key),\n      );\n\n      // Samples to remove\n      // const removeSampleKeys = prevSampleKeys.filter(\n      //   (key) => !sampleKeys.includes(key),\n      // );\n\n      // console.log(addSampleKeys, removeSampleKeys);\n\n      if (addSampleKeys.length) {\n        // Create an array of promises from `samples`\n        const loadSamplePromises = addSampleKeys.map((key) => {\n          return new Promise((resolve: (buffer: any) => void) => {\n            const sample = samples[key];\n            const prevSample = prevSamples ? (prevSamples as object)[key] : '';\n\n            // Only update sample if different than before\n            if (sample !== prevSample) {\n              // Pass `resolve` to `onLoad` parameter of Tone.Sampler\n              // When sample loads, this promise will resolve\n              instrumentRef.current.add(key, sample, resolve);\n            } else {\n              resolve(null);\n            }\n          });\n        });\n\n        // Once all promises in array resolve, run onLoad callback\n        Promise.all(loadSamplePromises).then((event) => {\n          if (typeof onLoad === 'function') {\n            onLoad(event);\n          }\n        });\n\n        // TODO: Work out a way to remove samples. Below doesn't work\n        // removeSampleKeys.forEach((key) => {\n        //   instrumentRef.current.add(key, null);\n        // });\n      }\n    }\n    /* eslint-disable-next-line */\n  }, [samples, type]);\n\n  return null;\n};\n\nconst Instrument: React.FC<InstrumentProps> = ({\n  type,\n  options,\n  notes,\n  polyphony,\n  oscillator,\n  envelope,\n  samples,\n  onLoad,\n}) => {\n  const {\n    volume,\n    pan,\n    mute,\n    solo,\n    effectsChain,\n    onInstrumentsUpdate,\n  } = useContext(TrackContext);\n\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  return (\n    <InstrumentConsumer\n      // <Instrument /> Props\n      type={type}\n      options={options}\n      notes={notes}\n      polyphony={polyphony}\n      oscillator={oscillator}\n      envelope={envelope}\n      samples={samples}\n      onLoad={onLoad}\n      // <Track /> Props\n      volume={volume}\n      pan={pan}\n      mute={mute}\n      solo={solo}\n      effectsChain={effectsChain}\n      onInstrumentsUpdate={onInstrumentsUpdate}\n    />\n  );\n};\n\n/**\n * Use Instrument's flattened synth props to create options object for Tone JS\n */\nconst buildSynthOptions = ({ oscillator, envelope }) => {\n  if (oscillator || envelope) {\n    return {\n      ...(envelope ? { envelope } : {}),\n      ...(oscillator ? { oscillator } : {}),\n    };\n  }\n\n  return undefined;\n};\n\nexport default Instrument;\n","import React, { useEffect, useContext, useRef } from 'react';\n\nimport { TrackContext } from './Track';\nimport Tone from '../lib/tone';\n\nexport type EffectType =\n  | 'autoFilter'\n  | 'autoPanner'\n  | 'autoWah'\n  | 'bitCrusher'\n  | 'distortion'\n  | 'feedbackDelay'\n  | 'freeverb'\n  | 'panVol'\n  | 'tremolo'\n  | 'eq3';\n\nexport interface EffectProps {\n  type?: EffectType;\n  id?: string;\n  delayTime?: string;\n  feedback?: number;\n  wet?: number;\n  low?: number;\n  mid?: number;\n  high?: number;\n  lowFrequency?: number;\n  highFrequency?: number;\n}\n\nexport interface EffectConsumerProps extends EffectProps {\n  onAddToEffectsChain?: Function;\n  onRemoveFromEffectsChain?: Function;\n}\n\nconst EffectConsumer: React.FC<EffectConsumerProps> = ({\n  type,\n  id,\n  delayTime = '8n',\n  feedback = 0.5,\n  wet = 1,\n  low,\n  mid,\n  high,\n  lowFrequency,\n  highFrequency,\n  onAddToEffectsChain,\n  onRemoveFromEffectsChain,\n}) => {\n  const effect = useRef<{\n    id: string | number;\n    feedback?: {\n      value: number;\n    };\n    delay?: {\n      value: number;\n    };\n    delayTime?: {\n      value: string;\n    };\n    wet?: {\n      value: number;\n    };\n    low?: {\n      value: number;\n    };\n    mid?: {\n      value: number;\n    };\n    high?: {\n      value: number;\n    };\n    lowFrequency?: {\n      value: number;\n    };\n    highFrequency?: {\n      value: number;\n    };\n  }>();\n\n  useEffect(() => {\n    // console.log('<Effect /> mount');\n    // console.log(`id: ${id}`);\n\n    if (type === 'autoFilter') {\n      effect.current = new Tone.AutoFilter();\n    } else if (type === 'autoPanner') {\n      effect.current = new Tone.AutoPanner();\n    } else if (type === 'autoWah') {\n      effect.current = new Tone.AutoWah();\n    } else if (type === 'bitCrusher') {\n      effect.current = new Tone.BitCrusher();\n      // Removed for now because delayTime has to be in ms\n      // } else if (type === 'chorus') {\n      //   effect.current = new Tone.Chorus();\n    } else if (type === 'distortion') {\n      effect.current = new Tone.Distortion(0.5);\n    } else if (type === 'feedbackDelay') {\n      effect.current = new Tone.FeedbackDelay(delayTime, feedback);\n    } else if (type === 'freeverb') {\n      effect.current = new Tone.Freeverb();\n    } else if (type === 'panVol') {\n      effect.current = new Tone.PanVol();\n      // Needs generate()\n      // } else if (type === 'reverb') {\n      //   effect.current = new Tone.Reverb();\n    } else if (type === 'tremolo') {\n      effect.current = new Tone.Tremolo();\n    } else if (type === 'eq3') {\n      effect.current = new Tone.EQ3(low, mid, high);\n    }\n\n    if (effect.current) {\n      effect.current.id = id;\n\n      // Update effects chain\n      // TODO: Work out which index to insert current this.effect\n      onAddToEffectsChain(effect.current);\n    }\n\n    return () => {\n      // console.log('<Effect /> unmount');\n      onRemoveFromEffectsChain(effect.current);\n    };\n    /* eslint-disable-next-line */\n  }, [type]);\n\n  useEffect(() => {\n    if (effect.current && effect.current.feedback) {\n      effect.current.feedback.value = feedback;\n    }\n  }, [feedback]);\n\n  useEffect(() => {\n    if (effect.current && effect.current.delayTime) {\n      effect.current.delayTime.value = delayTime;\n    }\n  }, [delayTime]);\n\n  useEffect(() => {\n    if (effect.current && effect.current.wet) {\n      effect.current.wet.value = wet;\n    }\n  }, [wet]);\n\n  useEffect(() => {\n    if (typeof low !== 'undefined' && effect.current && effect.current.low) {\n      effect.current.low.value = low;\n    }\n  }, [low]);\n\n  useEffect(() => {\n    if (typeof mid !== 'undefined' && effect.current && effect.current.mid) {\n      effect.current.mid.value = mid;\n    }\n  }, [mid]);\n\n  useEffect(() => {\n    if (typeof high !== 'undefined' && effect.current && effect.current.high) {\n      effect.current.high.value = high;\n    }\n  }, [high]);\n\n  useEffect(() => {\n    if (\n      typeof lowFrequency !== 'undefined' &&\n      effect.current &&\n      effect.current.lowFrequency\n    ) {\n      effect.current.lowFrequency.value = lowFrequency;\n    }\n  }, [lowFrequency]);\n\n  useEffect(() => {\n    if (\n      typeof highFrequency !== 'undefined' &&\n      effect.current &&\n      effect.current.highFrequency\n    ) {\n      effect.current.highFrequency.value = highFrequency;\n    }\n  }, [highFrequency]);\n\n  return null;\n};\n\nconst Effect: React.FC<EffectProps> = (props) => {\n  const { onAddToEffectsChain, onRemoveFromEffectsChain } = useContext(\n    TrackContext,\n  );\n\n  return (\n    <EffectConsumer\n      onAddToEffectsChain={onAddToEffectsChain}\n      onRemoveFromEffectsChain={onRemoveFromEffectsChain}\n      {...props}\n    />\n  );\n};\n\nexport default Effect;\n","import { MidiNote } from '../types/midi-notes';\n\nexport const instruments = [\n  { id: 'amSynth', name: 'AM Synth', props: ['polyphony', 'oscillatorType'] },\n  { id: 'duoSynth', name: 'Duo Synth', props: ['polyphony', 'oscillatorType'] },\n  { id: 'fmSynth', name: 'FM Synth', props: ['polyphony', 'oscillatorType'] },\n  { id: 'membraneSynth', name: 'Membrane Synth', props: [] },\n  { id: 'metalSynth', name: 'Metal Synth', props: [] },\n  {\n    id: 'monoSynth',\n    name: 'Mono Synth',\n    props: ['polyphony', 'oscillatorType'],\n  },\n  // { id: 'noiseSynth', name: 'Noise Synth' }, // No sound, disabled for now\n  { id: 'pluckSynth', name: 'Pluck Synth', props: [] },\n  { id: 'sampler', name: 'Sampler', props: ['samples'] },\n  { id: 'synth', name: 'Synth', props: ['polyphony', 'oscillatorType'] },\n];\n\nexport const effects = [\n  // --------------------------------------------------------------------------\n  // Tone JS Effects\n  // --------------------------------------------------------------------------\n  { id: 'autoFilter', name: 'Auto Filter' },\n  { id: 'autoPanner', name: 'Auto Panner' },\n  { id: 'autoWah', name: 'Auto Wah' },\n  { id: 'bitCrusher', name: 'Bit Crusher' },\n  // { id: 'chorus', name: 'Chorus' },\n  { id: 'distortion', name: 'Distortion' },\n  { id: 'feedbackDelay', name: 'Feedback Delay' },\n  { id: 'freeverb', name: 'Freeverb' },\n  { id: 'panVol', name: 'Volume/Pan' },\n  // { id: 'reverb', name: 'Reverb' },\n  { id: 'tremolo', name: 'Tremolo' },\n  // --------------------------------------------------------------------------\n  // Tone JS Components\n  // --------------------------------------------------------------------------\n  { id: 'eq3', name: 'EQ3' },\n];\n\nconst config = {\n  instruments,\n  effects,\n};\n\nexport const midiNotes: MidiNote[] = [\n  'C-2',\n  'C#-2',\n  'D-2',\n  'D#-2',\n  'E-2',\n  'F-2',\n  'F#-2',\n  'G-2',\n  'G#-2',\n  'A-2',\n  'A#-2',\n  'B-2',\n  'C-1',\n  'C#-1',\n  'D-1',\n  'D#-1',\n  'E-1',\n  'F-1',\n  'F#-1',\n  'G-1',\n  'G#-1',\n  'A-1',\n  'A#-1',\n  'B-1',\n  'C0',\n  'C#0',\n  'D0',\n  'D#0',\n  'E0',\n  'F0',\n  'F#0',\n  'G0',\n  'G#0',\n  'A0',\n  'A#0',\n  'B0',\n  'C1',\n  'C#1',\n  'D1',\n  'D#1',\n  'E1',\n  'F1',\n  'F#1',\n  'G1',\n  'G#1',\n  'A1',\n  'A#1',\n  'B1',\n  'C2',\n  'C#2',\n  'D2',\n  'D#2',\n  'E2',\n  'F2',\n  'F#2',\n  'G2',\n  'G#2',\n  'A2',\n  'A#2',\n  'B2',\n  'C3',\n  'C#3',\n  'D3',\n  'D#3',\n  'E3',\n  'F3',\n  'F#3',\n  'G3',\n  'G#3',\n  'A3',\n  'A#3',\n  'B3',\n  'C4',\n  'C#4',\n  'D4',\n  'D#4',\n  'E4',\n  'F4',\n  'F#4',\n  'G4',\n  'G#4',\n  'A4',\n  'A#4',\n  'B4',\n  'C5',\n  'C#5',\n  'D5',\n  'D#5',\n  'E5',\n  'F5',\n  'F#5',\n  'G5',\n  'G#5',\n  'A5',\n  'A#5',\n  'B5',\n  'C6',\n  'C#6',\n  'D6',\n  'D#6',\n  'E6',\n  'F6',\n  'F#6',\n  'G6',\n  'G#6',\n  'A6',\n  'A#6',\n  'B6',\n  'C7',\n  'C#7',\n  'D7',\n  'D#7',\n  'E7',\n  'F7',\n  'F#7',\n  'G7',\n  'G#7',\n  'A7',\n  'A#7',\n  'B7',\n  'C8',\n  'C#8',\n  'D8',\n  'D#8',\n  'E8',\n  'F8',\n  'F#8',\n  'G8',\n];\n\nexport default config;\n"],"names":["SongContext","React","createContext","isPlaying","Song","bpm","swing","swingSubdivision","volume","isMuted","children","useEffect","document","body","addEventListener","StartAudioContext","Tone","context","once","Transport","value","start","stop","Master","mute","window","Provider","buildSequencerStep","step","i","notes","name","index","duration","velocity","Array","isArray","map","s","usePrevious","ref","useRef","current","TrackContext","pan","solo","effectsChain","onInstrumentsUpdate","onAddToEffectsChain","onRemoveFromEffectsChain","TrackConsumer","steps","subdivision","effects","onStepPlay","useState","setEffectsChain","instruments","setInstruments","sequencer","instrumentsRef","sequencerSteps","prevSequencerSteps","Sequence","_","forEach","note","instrument","triggerAttackRelease","undefined","length","isEqual","equal","remove","add","removeAll","JSON","stringify","cleanup","dispose","handleAddToEffectsChain","effect","prevEffectsChain","handleRemoveFromEffectsChain","filter","e","id","handleInstrumentsUpdate","newInstruments","Track","props","useContext","InstrumentConsumer","type","options","polyphony","oscillator","envelope","samples","onLoad","instrumentRef","trackChannelBase","prevNotes","Channel","prevType","Sampler","curve","release","MembraneSynth","buildSynthOptions","MetalSynth","NoiseSynth","PluckSynth","synth","AMSynth","DuoSynth","FMSynth","MonoSynth","Synth","PolySynth","chain","set","prevNote","key","triggerAttack","n","triggerRelease","disconnect","prevSamples","isFirstSamplerInit","Boolean","prevSampleKeys","Object","keys","sampleKeys","addSampleKeys","includes","loadSamplePromises","Promise","resolve","sample","prevSample","all","then","event","Instrument","EffectConsumer","delayTime","feedback","wet","low","mid","high","lowFrequency","highFrequency","AutoFilter","AutoPanner","AutoWah","BitCrusher","Distortion","FeedbackDelay","Freeverb","PanVol","Tremolo","EQ3","Effect","config","midiNotes"],"mappings":"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"}